package com.orderservice;

import com.orderservice.Order;
import com.orderservice.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class OrderService {
    private static final Logger logger = LoggerFactory.getLogger(OrderService.class);

    @Autowired
    private OrderRepository orderRepository;
    
    @Autowired
    private RestTemplate restTemplate;

    public Order placeOrder(Order order) {
        logger.info("Placing order: {}", order);
        if (order.getUserId() == null || order.getUserId().trim().isEmpty()) {
            throw new IllegalArgumentException("User ID is required");
        }
        if (order.getStockSymbol() == null || order.getStockSymbol().trim().isEmpty()) {
            throw new IllegalArgumentException("Stock symbol is required");
        }
        if (order.getQuantity() <= 0) {
            throw new IllegalArgumentException("Quantity must be greater than 0");
        }
        if (order.getPrice() <= 0) {
            throw new IllegalArgumentException("Price must be greater than 0");
        }
        
        order.setStatus("PENDING");
        Order savedOrder = orderRepository.save(order);
        logger.info("Order saved with ID: {}", savedOrder.getId());
        
        Map<String, Object> orderData = new HashMap<>();
        orderData.put("stockSymbol", savedOrder.getStockSymbol());
        orderData.put("quantity", savedOrder.getQuantity());
        
        String marketServiceUrl = "http://market-service/market/placeStockOrder/" + savedOrder.getId();
        try {
            logger.info("Calling Market Service at: {}", marketServiceUrl);
            String marketResponse = restTemplate.postForObject(marketServiceUrl, orderData, String.class);
            logger.info("Market Service response: {}", marketResponse);
        } catch (Exception e) {
            logger.error("Failed to call Market Service: {}", e.getMessage(), e);
        }
        
        try {
            double totalCost = savedOrder.getQuantity() * savedOrder.getPrice();
            String accountServiceUrl = "http://account-transaction-service/account/updateBalance/" + savedOrder.getUserId() + "?amount=" + (-totalCost);
            logger.info("Calling Account Transaction Service at: {}", accountServiceUrl);
            restTemplate.put(accountServiceUrl, null);
            logger.info("Account Transaction Service called successfully");
        } catch (Exception e) {
            logger.error("Failed to call Account Transaction Service: {}", e.getMessage(), e);
        }
        
        return savedOrder;
    }

    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }
}