package com.transactionservice;

import com.transactionservice.User;
import com.transactionservice.AccountTransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.server.ResponseStatusException;

@RestController
@RequestMapping("/account")
public class AccountTransactionController {
    private static final Logger logger = LoggerFactory.getLogger(AccountTransactionController.class);

    @Autowired
    private UserRepository userRepository;

    @PutMapping("/updateBalance/{username}")
    public ResponseEntity<Void> updateBalance(@PathVariable String username, @RequestParam double amount) {
        logger.info("Updating balance for user: {}, amount: {}", username, amount);
        try {
            User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found: " + username));
            double newBalance = user.getBalance() + amount;
            if (newBalance < 0) {
                logger.warn("Insufficient balance for user: {}, current: {}, requested: {}", username, user.getBalance(), amount);
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient balance");
            }
            user.setBalance(newBalance);
            userRepository.save(user);
            logger.info("Balance updated for user: {}, new balance: {}", username, newBalance);
            return ResponseEntity.noContent().build(); // 204 No Content
        } catch (ResponseStatusException e) {
            throw e; // Re-throw to maintain HTTP status and message
        } catch (Exception e) {
            logger.error("Unexpected error updating balance: {}", e.getMessage(), e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Error updating balance: " + e.getMessage());
        }
    }
}
s