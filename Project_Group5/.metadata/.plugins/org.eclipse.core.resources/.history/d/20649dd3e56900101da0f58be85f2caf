package com.orderservice;

import com.orderservice.Order;
import com.orderservice.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;

@Service
public class OrderService {
    private static final Logger logger = LoggerFactory.getLogger(OrderService.class);

    @Autowired
    private OrderRepository orderRepository;
    
    @Autowired
    private RestTemplate restTemplate;

    public Order placeOrder(Order order) {
        logger.info("Placing order: {}", order);
        order.setStatus("PENDING");
        Order savedOrder = orderRepository.save(order);
        logger.info("Order saved with ID: {}", savedOrder.getId());
        
        // Prepare JSON payload for Market Service
        Map<String, Object> orderData = new HashMap<>();
        orderData.put("stockSymbol", savedOrder.getStockSymbol());
        orderData.put("quantity", savedOrder.getQuantity());
        
        // Call Market Service to place stock order
        String marketServiceUrl = "http://market-service/market/placeStockOrder/" + savedOrder.getId();
        try {
            logger.info("Calling Market Service at: {}", marketServiceUrl);
            String marketResponse = restTemplate.postForObject(marketServiceUrl, orderData, String.class);
            logger.info("Market Service response: {}", marketResponse);
        } catch (Exception e) {
            logger.error("Failed to call Market Service: {}", e.getMessage());
            // Continue processing even if Market Service fails
            // In a production system, consider compensating actions or retries
        }
        
        return savedOrder;
    }
}
